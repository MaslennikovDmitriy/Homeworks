№1
Переключение контекста - процесс записи и восстановления состояния процесса или потока таким образом, чтобы в дальнейшем продолжить его выполнение с прерванного места. Этот механизм позволяет нескольким процессам разделить между собой ресурсы одного центрального процессора.

№2
Основные подходы к организации параллелизма:
1) Псевдопараллелизм - разделение задач на небольшие части и быстрое переключение между этими частями;
2) Истинная параллельность - одновременное задействование ресурсов нескольких ядер процессора (если таковые имеются) для разделения задач.
В реальной жизни используется смесь этих явлений - у каждого ядра своя последовательность выполнения программ

№3
На производительность параллельных алгоритмов может влиять время переключения между частями задач (если время переключения между этими частями сравнимо со временем выполнения какой либо части, то производительность очень сильно снижается). Также влияет количество ядер процессора, вопросы разделения задач (может возникнуть конкуренция за различные данные, что может привести к фатальным последствиям)

№4
Концепция асинхронного исполнения реализована в стандартной библиотеке при помощи работы со статическим объектом future. Существуют следующие инструменты работы с ним:
1 )async - запускает в потоке функцию, результат которой завернет в объект типа future;
2) packeged_task  - учитывает информацию в потоке, пример:

std::packeged_task<int()> task([]()/*lambda,functor*/{return 42;});
auto result = task.get_future();
std::thread(std::move(task)).detach();
X = result.get(); 

3) promice - позволяет работать со значением, как будто оно уже известно, пример:

atd::promise<int> p;
auto result =  p.get_future;
std::thread([](std::promise<int>&p){})
X = result.get(); 

№5
При замене последовательной реализации на параллельную стоит учитывать целесообразность этой замены, предотвратить различные конфликты, которые могут увеличить время работы или полностью остановить работу программы.

